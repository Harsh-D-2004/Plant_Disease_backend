"""updated db

Revision ID: 3131bfbc0879
Revises: ac73e3d74fc2
Create Date: 2025-01-29 15:56:38.004185

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3131bfbc0879'
down_revision: Union[str, None] = 'ac73e3d74fc2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_disease_predictors_disease_name', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_farmer_id', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_id', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_infected_plant', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_plant_name', table_name='disease_predictors')
    op.drop_table('disease_predictors')
    op.drop_index('ix_factors_city', table_name='factors')
    op.drop_index('ix_factors_farmer_id', table_name='factors')
    op.drop_index('ix_factors_id', table_name='factors')
    op.drop_index('ix_factors_latitude', table_name='factors')
    op.drop_index('ix_factors_longitude', table_name='factors')
    op.drop_index('ix_factors_soil_type', table_name='factors')
    op.drop_index('ix_factors_state', table_name='factors')
    op.drop_index('ix_factors_temperature', table_name='factors')
    op.drop_index('ix_factors_weather', table_name='factors')
    op.drop_table('factors')
    op.drop_index('ix_farmers_id', table_name='farmers')
    op.drop_index('ix_farmers_name', table_name='farmers')
    op.drop_index('ix_farmers_phone', table_name='farmers')
    op.drop_table('farmers')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('farmers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('farmers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('crops', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='farmers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_farmers_phone', 'farmers', ['phone'], unique=False)
    op.create_index('ix_farmers_name', 'farmers', ['name'], unique=False)
    op.create_index('ix_farmers_id', 'farmers', ['id'], unique=False)
    op.create_table('factors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('weather', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('soil_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmers.id'], name='factors_farmer_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='factors_pkey')
    )
    op.create_index('ix_factors_weather', 'factors', ['weather'], unique=False)
    op.create_index('ix_factors_temperature', 'factors', ['temperature'], unique=False)
    op.create_index('ix_factors_state', 'factors', ['state'], unique=False)
    op.create_index('ix_factors_soil_type', 'factors', ['soil_type'], unique=False)
    op.create_index('ix_factors_longitude', 'factors', ['longitude'], unique=False)
    op.create_index('ix_factors_latitude', 'factors', ['latitude'], unique=False)
    op.create_index('ix_factors_id', 'factors', ['id'], unique=False)
    op.create_index('ix_factors_farmer_id', 'factors', ['farmer_id'], unique=False)
    op.create_index('ix_factors_city', 'factors', ['city'], unique=False)
    op.create_table('disease_predictors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('infected_plant', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('plant_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('disease_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('pests', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('symptoms', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('symptom_description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('Preventive_measures', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('treatment', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('treatment_description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('time_to_treatment', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmers.id'], name='disease_predictors_farmer_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='disease_predictors_pkey')
    )
    op.create_index('ix_disease_predictors_plant_name', 'disease_predictors', ['plant_name'], unique=False)
    op.create_index('ix_disease_predictors_infected_plant', 'disease_predictors', ['infected_plant'], unique=False)
    op.create_index('ix_disease_predictors_id', 'disease_predictors', ['id'], unique=False)
    op.create_index('ix_disease_predictors_farmer_id', 'disease_predictors', ['farmer_id'], unique=False)
    op.create_index('ix_disease_predictors_disease_name', 'disease_predictors', ['disease_name'], unique=False)
    # ### end Alembic commands ###
