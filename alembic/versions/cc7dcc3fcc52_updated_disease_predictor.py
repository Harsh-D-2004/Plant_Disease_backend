"""updated Disease Predictor

Revision ID: cc7dcc3fcc52
Revises: a2c8f3e39c7d
Create Date: 2025-01-25 08:55:37.196196

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'cc7dcc3fcc52'
down_revision: Union[str, None] = 'a2c8f3e39c7d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_disease_predictors_disease_name', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_farmer_id', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_id', table_name='disease_predictors')
    op.drop_index('ix_disease_predictors_plant_name', table_name='disease_predictors')
    op.drop_table('disease_predictors')
    op.drop_index('ix_farmers_id', table_name='farmers')
    op.drop_index('ix_farmers_location', table_name='farmers')
    op.drop_index('ix_farmers_name', table_name='farmers')
    op.drop_index('ix_farmers_phone', table_name='farmers')
    op.drop_index('ix_farmers_soil_type', table_name='farmers')
    op.drop_table('farmers')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('farmers',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('farmers_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('crops', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('soil_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='farmers_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_farmers_soil_type', 'farmers', ['soil_type'], unique=False)
    op.create_index('ix_farmers_phone', 'farmers', ['phone'], unique=False)
    op.create_index('ix_farmers_name', 'farmers', ['name'], unique=False)
    op.create_index('ix_farmers_location', 'farmers', ['location'], unique=False)
    op.create_index('ix_farmers_id', 'farmers', ['id'], unique=False)
    op.create_table('disease_predictors',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plant_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('disease_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('symptoms', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('farmer_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['farmer_id'], ['farmers.id'], name='disease_predictors_farmer_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='disease_predictors_pkey')
    )
    op.create_index('ix_disease_predictors_plant_name', 'disease_predictors', ['plant_name'], unique=False)
    op.create_index('ix_disease_predictors_id', 'disease_predictors', ['id'], unique=False)
    op.create_index('ix_disease_predictors_farmer_id', 'disease_predictors', ['farmer_id'], unique=False)
    op.create_index('ix_disease_predictors_disease_name', 'disease_predictors', ['disease_name'], unique=False)
    # ### end Alembic commands ###
